// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: moviedb_service.proto

package moviedb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieDBService_AddMovie_FullMethodName            = "/moviedb_service.MovieDBService/AddMovie"
	MovieDBService_GetMovie_FullMethodName            = "/moviedb_service.MovieDBService/GetMovie"
	MovieDBService_GetAllMovies_FullMethodName        = "/moviedb_service.MovieDBService/GetAllMovies"
	MovieDBService_UpdateMovie_FullMethodName         = "/moviedb_service.MovieDBService/UpdateMovie"
	MovieDBService_DeleteMovie_FullMethodName         = "/moviedb_service.MovieDBService/DeleteMovie"
	MovieDBService_AddVenue_FullMethodName            = "/moviedb_service.MovieDBService/AddVenue"
	MovieDBService_GetVenue_FullMethodName            = "/moviedb_service.MovieDBService/GetVenue"
	MovieDBService_GetAllVenues_FullMethodName        = "/moviedb_service.MovieDBService/GetAllVenues"
	MovieDBService_UpdateVenue_FullMethodName         = "/moviedb_service.MovieDBService/UpdateVenue"
	MovieDBService_DeleteVenue_FullMethodName         = "/moviedb_service.MovieDBService/DeleteVenue"
	MovieDBService_GetUpcomingMovies_FullMethodName   = "/moviedb_service.MovieDBService/GetUpcomingMovies"
	MovieDBService_GetNowPlayingMovies_FullMethodName = "/moviedb_service.MovieDBService/GetNowPlayingMovies"
)

// MovieDBServiceClient is the client API for MovieDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieDBServiceClient interface {
	AddMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*MovieResponse, error)
	GetMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	GetAllMovies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MovieListResponse, error)
	UpdateMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*MovieResponse, error)
	DeleteMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	AddVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*VenueResponse, error)
	GetVenue(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*VenueResponse, error)
	GetAllVenues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MovieListResponse, error)
	UpdateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*VenueResponse, error)
	DeleteVenue(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	GetUpcomingMovies(ctx context.Context, in *GetUpcomingMovieRequest, opts ...grpc.CallOption) (*GetUpcomingMovieResponse, error)
	GetNowPlayingMovies(ctx context.Context, in *GetUpcomingMovieRequest, opts ...grpc.CallOption) (*GetUpcomingMovieResponse, error)
}

type movieDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieDBServiceClient(cc grpc.ClientConnInterface) MovieDBServiceClient {
	return &movieDBServiceClient{cc}
}

func (c *movieDBServiceClient) AddMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_AddMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetAllMovies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MovieListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieListResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetAllMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) UpdateMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) DeleteMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) AddVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*VenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VenueResponse)
	err := c.cc.Invoke(ctx, MovieDBService_AddVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetVenue(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*VenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VenueResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetAllVenues(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MovieListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieListResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetAllVenues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) UpdateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*VenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VenueResponse)
	err := c.cc.Invoke(ctx, MovieDBService_UpdateVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) DeleteVenue(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_DeleteVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetUpcomingMovies(ctx context.Context, in *GetUpcomingMovieRequest, opts ...grpc.CallOption) (*GetUpcomingMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingMovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetUpcomingMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDBServiceClient) GetNowPlayingMovies(ctx context.Context, in *GetUpcomingMovieRequest, opts ...grpc.CallOption) (*GetUpcomingMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingMovieResponse)
	err := c.cc.Invoke(ctx, MovieDBService_GetNowPlayingMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieDBServiceServer is the server API for MovieDBService service.
// All implementations must embed UnimplementedMovieDBServiceServer
// for forward compatibility.
type MovieDBServiceServer interface {
	AddMovie(context.Context, *Movie) (*MovieResponse, error)
	GetMovie(context.Context, *MovieRequest) (*MovieResponse, error)
	GetAllMovies(context.Context, *empty.Empty) (*MovieListResponse, error)
	UpdateMovie(context.Context, *Movie) (*MovieResponse, error)
	DeleteMovie(context.Context, *MovieRequest) (*MovieResponse, error)
	AddVenue(context.Context, *Venue) (*VenueResponse, error)
	GetVenue(context.Context, *MovieRequest) (*VenueResponse, error)
	GetAllVenues(context.Context, *empty.Empty) (*MovieListResponse, error)
	UpdateVenue(context.Context, *Venue) (*VenueResponse, error)
	DeleteVenue(context.Context, *MovieRequest) (*MovieResponse, error)
	GetUpcomingMovies(context.Context, *GetUpcomingMovieRequest) (*GetUpcomingMovieResponse, error)
	GetNowPlayingMovies(context.Context, *GetUpcomingMovieRequest) (*GetUpcomingMovieResponse, error)
	mustEmbedUnimplementedMovieDBServiceServer()
}

// UnimplementedMovieDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieDBServiceServer struct{}

func (UnimplementedMovieDBServiceServer) AddMovie(context.Context, *Movie) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (UnimplementedMovieDBServiceServer) GetMovie(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieDBServiceServer) GetAllMovies(context.Context, *empty.Empty) (*MovieListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMovieDBServiceServer) UpdateMovie(context.Context, *Movie) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieDBServiceServer) DeleteMovie(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieDBServiceServer) AddVenue(context.Context, *Venue) (*VenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVenue not implemented")
}
func (UnimplementedMovieDBServiceServer) GetVenue(context.Context, *MovieRequest) (*VenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenue not implemented")
}
func (UnimplementedMovieDBServiceServer) GetAllVenues(context.Context, *empty.Empty) (*MovieListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVenues not implemented")
}
func (UnimplementedMovieDBServiceServer) UpdateVenue(context.Context, *Venue) (*VenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVenue not implemented")
}
func (UnimplementedMovieDBServiceServer) DeleteVenue(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVenue not implemented")
}
func (UnimplementedMovieDBServiceServer) GetUpcomingMovies(context.Context, *GetUpcomingMovieRequest) (*GetUpcomingMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingMovies not implemented")
}
func (UnimplementedMovieDBServiceServer) GetNowPlayingMovies(context.Context, *GetUpcomingMovieRequest) (*GetUpcomingMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowPlayingMovies not implemented")
}
func (UnimplementedMovieDBServiceServer) mustEmbedUnimplementedMovieDBServiceServer() {}
func (UnimplementedMovieDBServiceServer) testEmbeddedByValue()                        {}

// UnsafeMovieDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieDBServiceServer will
// result in compilation errors.
type UnsafeMovieDBServiceServer interface {
	mustEmbedUnimplementedMovieDBServiceServer()
}

func RegisterMovieDBServiceServer(s grpc.ServiceRegistrar, srv MovieDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieDBService_ServiceDesc, srv)
}

func _MovieDBService_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_AddMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).AddMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetMovie(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetAllMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetAllMovies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).UpdateMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).DeleteMovie(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_AddVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).AddVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_AddVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).AddVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetVenue(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetAllVenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetAllVenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetAllVenues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetAllVenues(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_UpdateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).UpdateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_UpdateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).UpdateVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_DeleteVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).DeleteVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_DeleteVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).DeleteVenue(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetUpcomingMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetUpcomingMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetUpcomingMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetUpcomingMovies(ctx, req.(*GetUpcomingMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDBService_GetNowPlayingMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDBServiceServer).GetNowPlayingMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieDBService_GetNowPlayingMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDBServiceServer).GetNowPlayingMovies(ctx, req.(*GetUpcomingMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieDBService_ServiceDesc is the grpc.ServiceDesc for MovieDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviedb_service.MovieDBService",
	HandlerType: (*MovieDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMovie",
			Handler:    _MovieDBService_AddMovie_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieDBService_GetMovie_Handler,
		},
		{
			MethodName: "GetAllMovies",
			Handler:    _MovieDBService_GetAllMovies_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieDBService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieDBService_DeleteMovie_Handler,
		},
		{
			MethodName: "AddVenue",
			Handler:    _MovieDBService_AddVenue_Handler,
		},
		{
			MethodName: "GetVenue",
			Handler:    _MovieDBService_GetVenue_Handler,
		},
		{
			MethodName: "GetAllVenues",
			Handler:    _MovieDBService_GetAllVenues_Handler,
		},
		{
			MethodName: "UpdateVenue",
			Handler:    _MovieDBService_UpdateVenue_Handler,
		},
		{
			MethodName: "DeleteVenue",
			Handler:    _MovieDBService_DeleteVenue_Handler,
		},
		{
			MethodName: "GetUpcomingMovies",
			Handler:    _MovieDBService_GetUpcomingMovies_Handler,
		},
		{
			MethodName: "GetNowPlayingMovies",
			Handler:    _MovieDBService_GetNowPlayingMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moviedb_service.proto",
}
