// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: moviedb_service.proto

package moviedb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CastAndCrewType int32

const (
	CastAndCrewType_ACTOR              CastAndCrewType = 0
	CastAndCrewType_DIRECTOR           CastAndCrewType = 1
	CastAndCrewType_PRODUCER           CastAndCrewType = 2
	CastAndCrewType_WRITER             CastAndCrewType = 3
	CastAndCrewType_MUSIC_DIRECTOR     CastAndCrewType = 4
	CastAndCrewType_CINEMATOGRAPHER    CastAndCrewType = 5
	CastAndCrewType_EDITOR             CastAndCrewType = 6
	CastAndCrewType_ART_DIRECTOR       CastAndCrewType = 7
	CastAndCrewType_COSTUME_DESIGNER   CastAndCrewType = 8
	CastAndCrewType_MAKEUP_ARTIST      CastAndCrewType = 9
	CastAndCrewType_SOUND_DESIGNER     CastAndCrewType = 10
	CastAndCrewType_VFX_ARTIST         CastAndCrewType = 11
	CastAndCrewType_STUNT_PERFORMER    CastAndCrewType = 12
	CastAndCrewType_CHOREOGRAPHER      CastAndCrewType = 13
	CastAndCrewType_LYRICIST           CastAndCrewType = 14
	CastAndCrewType_PLAYBACK_SINGER    CastAndCrewType = 15
	CastAndCrewType_DUBBING_ARTIST     CastAndCrewType = 16
	CastAndCrewType_PUBLICITY_DESIGNER CastAndCrewType = 17
	CastAndCrewType_PUBLIC_RELATIONS   CastAndCrewType = 18
	CastAndCrewType_DISTRIBUTOR        CastAndCrewType = 19
	CastAndCrewType_MARKETING          CastAndCrewType = 20
	CastAndCrewType_LEGAL              CastAndCrewType = 21
	CastAndCrewType_FINANCE            CastAndCrewType = 22
	CastAndCrewType_PRODUCTION         CastAndCrewType = 23
	CastAndCrewType_OTHER              CastAndCrewType = 24
)

// Enum value maps for CastAndCrewType.
var (
	CastAndCrewType_name = map[int32]string{
		0:  "ACTOR",
		1:  "DIRECTOR",
		2:  "PRODUCER",
		3:  "WRITER",
		4:  "MUSIC_DIRECTOR",
		5:  "CINEMATOGRAPHER",
		6:  "EDITOR",
		7:  "ART_DIRECTOR",
		8:  "COSTUME_DESIGNER",
		9:  "MAKEUP_ARTIST",
		10: "SOUND_DESIGNER",
		11: "VFX_ARTIST",
		12: "STUNT_PERFORMER",
		13: "CHOREOGRAPHER",
		14: "LYRICIST",
		15: "PLAYBACK_SINGER",
		16: "DUBBING_ARTIST",
		17: "PUBLICITY_DESIGNER",
		18: "PUBLIC_RELATIONS",
		19: "DISTRIBUTOR",
		20: "MARKETING",
		21: "LEGAL",
		22: "FINANCE",
		23: "PRODUCTION",
		24: "OTHER",
	}
	CastAndCrewType_value = map[string]int32{
		"ACTOR":              0,
		"DIRECTOR":           1,
		"PRODUCER":           2,
		"WRITER":             3,
		"MUSIC_DIRECTOR":     4,
		"CINEMATOGRAPHER":    5,
		"EDITOR":             6,
		"ART_DIRECTOR":       7,
		"COSTUME_DESIGNER":   8,
		"MAKEUP_ARTIST":      9,
		"SOUND_DESIGNER":     10,
		"VFX_ARTIST":         11,
		"STUNT_PERFORMER":    12,
		"CHOREOGRAPHER":      13,
		"LYRICIST":           14,
		"PLAYBACK_SINGER":    15,
		"DUBBING_ARTIST":     16,
		"PUBLICITY_DESIGNER": 17,
		"PUBLIC_RELATIONS":   18,
		"DISTRIBUTOR":        19,
		"MARKETING":          20,
		"LEGAL":              21,
		"FINANCE":            22,
		"PRODUCTION":         23,
		"OTHER":              24,
	}
)

func (x CastAndCrewType) Enum() *CastAndCrewType {
	p := new(CastAndCrewType)
	*p = x
	return p
}

func (x CastAndCrewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CastAndCrewType) Descriptor() protoreflect.EnumDescriptor {
	return file_moviedb_service_proto_enumTypes[0].Descriptor()
}

func (CastAndCrewType) Type() protoreflect.EnumType {
	return &file_moviedb_service_proto_enumTypes[0]
}

func (x CastAndCrewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CastAndCrewType.Descriptor instead.
func (CastAndCrewType) EnumDescriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{0}
}

type VenueType int32

const (
	VenueType_MOVIE   VenueType = 0
	VenueType_CONCERT VenueType = 1
	VenueType_PLAY    VenueType = 2
	VenueType_STANDUP VenueType = 3
)

// Enum value maps for VenueType.
var (
	VenueType_name = map[int32]string{
		0: "MOVIE",
		1: "CONCERT",
		2: "PLAY",
		3: "STANDUP",
	}
	VenueType_value = map[string]int32{
		"MOVIE":   0,
		"CONCERT": 1,
		"PLAY":    2,
		"STANDUP": 3,
	}
)

func (x VenueType) Enum() *VenueType {
	p := new(VenueType)
	*p = x
	return p
}

func (x VenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_moviedb_service_proto_enumTypes[1].Descriptor()
}

func (VenueType) Type() protoreflect.EnumType {
	return &file_moviedb_service_proto_enumTypes[1]
}

func (x VenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VenueType.Descriptor instead.
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{1}
}

type SeatType int32

const (
	SeatType_TWO_D   SeatType = 0
	SeatType_THREE_D SeatType = 1
	SeatType_FOUR_D  SeatType = 2
	SeatType_NORMAL  SeatType = 3
	SeatType_VIP     SeatType = 4
)

// Enum value maps for SeatType.
var (
	SeatType_name = map[int32]string{
		0: "TWO_D",
		1: "THREE_D",
		2: "FOUR_D",
		3: "NORMAL",
		4: "VIP",
	}
	SeatType_value = map[string]int32{
		"TWO_D":   0,
		"THREE_D": 1,
		"FOUR_D":  2,
		"NORMAL":  3,
		"VIP":     4,
	}
)

func (x SeatType) Enum() *SeatType {
	p := new(SeatType)
	*p = x
	return p
}

func (x SeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_moviedb_service_proto_enumTypes[2].Descriptor()
}

func (SeatType) Type() protoreflect.EnumType {
	return &file_moviedb_service_proto_enumTypes[2]
}

func (x SeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatType.Descriptor instead.
func (SeatType) EnumDescriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{2}
}

type CastAndCrew struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          CastAndCrewType        `protobuf:"varint,2,opt,name=type,proto3,enum=moviedb_service.CastAndCrewType" json:"type,omitempty"`
	CharacterName string                 `protobuf:"bytes,3,opt,name=character_name,json=characterName,proto3" json:"character_name,omitempty"`
	Photourl      string                 `protobuf:"bytes,4,opt,name=photourl,proto3" json:"photourl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CastAndCrew) Reset() {
	*x = CastAndCrew{}
	mi := &file_moviedb_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastAndCrew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastAndCrew) ProtoMessage() {}

func (x *CastAndCrew) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastAndCrew.ProtoReflect.Descriptor instead.
func (*CastAndCrew) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{0}
}

func (x *CastAndCrew) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CastAndCrew) GetType() CastAndCrewType {
	if x != nil {
		return x.Type
	}
	return CastAndCrewType_ACTOR
}

func (x *CastAndCrew) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *CastAndCrew) GetPhotourl() string {
	if x != nil {
		return x.Photourl
	}
	return ""
}

type MovieTimeSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     string                 `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       string                 `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration      int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Date          string                 `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	MovieFormat   SeatType               `protobuf:"varint,5,opt,name=movie_format,json=movieFormat,proto3,enum=moviedb_service.SeatType" json:"movie_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieTimeSlot) Reset() {
	*x = MovieTimeSlot{}
	mi := &file_moviedb_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieTimeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieTimeSlot) ProtoMessage() {}

func (x *MovieTimeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieTimeSlot.ProtoReflect.Descriptor instead.
func (*MovieTimeSlot) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{1}
}

func (x *MovieTimeSlot) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *MovieTimeSlot) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *MovieTimeSlot) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovieTimeSlot) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MovieTimeSlot) GetMovieFormat() SeatType {
	if x != nil {
		return x.MovieFormat
	}
	return SeatType_TWO_D
}

type Movie struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Duration        int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Language        []string               `protobuf:"bytes,4,rep,name=language,proto3" json:"language,omitempty"`
	Type            []string               `protobuf:"bytes,5,rep,name=type,proto3" json:"type,omitempty"`
	CastCrew        []*CastAndCrew         `protobuf:"bytes,6,rep,name=cast_crew,json=castCrew,proto3" json:"cast_crew,omitempty"`
	PosterUrl       string                 `protobuf:"bytes,7,opt,name=poster_url,json=posterUrl,proto3" json:"poster_url,omitempty"`
	TrailerUrl      string                 `protobuf:"bytes,8,opt,name=trailer_url,json=trailerUrl,proto3" json:"trailer_url,omitempty"`
	ReleaseDate     string                 `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	MovieResolution []string               `protobuf:"bytes,10,rep,name=movie_resolution,json=movieResolution,proto3" json:"movie_resolution,omitempty"`
	Venues          []*Venue               `protobuf:"bytes,11,rep,name=venues,proto3" json:"venues,omitempty"`
	Movieid         string                 `protobuf:"bytes,12,opt,name=movieid,proto3" json:"movieid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Movie) Reset() {
	*x = Movie{}
	mi := &file_moviedb_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{2}
}

func (x *Movie) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Movie) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Movie) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Movie) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Movie) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Movie) GetCastCrew() []*CastAndCrew {
	if x != nil {
		return x.CastCrew
	}
	return nil
}

func (x *Movie) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *Movie) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *Movie) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Movie) GetMovieResolution() []string {
	if x != nil {
		return x.MovieResolution
	}
	return nil
}

func (x *Movie) GetVenues() []*Venue {
	if x != nil {
		return x.Venues
	}
	return nil
}

func (x *Movie) GetMovieid() string {
	if x != nil {
		return x.Movieid
	}
	return ""
}

type SeatMatrix struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeatNumber    string                 `protobuf:"bytes,1,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`
	IsBooked      bool                   `protobuf:"varint,2,opt,name=is_booked,json=isBooked,proto3" json:"is_booked,omitempty"`
	Price         int32                  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Row           int32                  `protobuf:"varint,4,opt,name=row,proto3" json:"row,omitempty"`
	Column        int32                  `protobuf:"varint,5,opt,name=column,proto3" json:"column,omitempty"`
	Type          SeatType               `protobuf:"varint,6,opt,name=type,proto3,enum=moviedb_service.SeatType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeatMatrix) Reset() {
	*x = SeatMatrix{}
	mi := &file_moviedb_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeatMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMatrix) ProtoMessage() {}

func (x *SeatMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMatrix.ProtoReflect.Descriptor instead.
func (*SeatMatrix) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{3}
}

func (x *SeatMatrix) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *SeatMatrix) GetIsBooked() bool {
	if x != nil {
		return x.IsBooked
	}
	return false
}

func (x *SeatMatrix) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatMatrix) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *SeatMatrix) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *SeatMatrix) GetType() SeatType {
	if x != nil {
		return x.Type
	}
	return SeatType_TWO_D
}

type Venue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address        string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Type           VenueType              `protobuf:"varint,3,opt,name=type,proto3,enum=moviedb_service.VenueType" json:"type,omitempty"`
	Rows           int32                  `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
	Columns        int32                  `protobuf:"varint,5,opt,name=columns,proto3" json:"columns,omitempty"`
	Longitude      float32                `protobuf:"fixed32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude       float32                `protobuf:"fixed32,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	ScreenNumber   int32                  `protobuf:"varint,8,opt,name=screen_number,json=screenNumber,proto3" json:"screen_number,omitempty"`
	Seats          []*SeatMatrix          `protobuf:"bytes,9,rep,name=seats,proto3" json:"seats,omitempty"`
	MovieTimeSlots []*MovieTimeSlot       `protobuf:"bytes,10,rep,name=movie_time_slots,json=movieTimeSlots,proto3" json:"movie_time_slots,omitempty"`
	Movies         []*Movie               `protobuf:"bytes,11,rep,name=movies,proto3" json:"movies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Venue) Reset() {
	*x = Venue{}
	mi := &file_moviedb_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Venue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Venue) ProtoMessage() {}

func (x *Venue) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Venue.ProtoReflect.Descriptor instead.
func (*Venue) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{4}
}

func (x *Venue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Venue) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Venue) GetType() VenueType {
	if x != nil {
		return x.Type
	}
	return VenueType_MOVIE
}

func (x *Venue) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Venue) GetColumns() int32 {
	if x != nil {
		return x.Columns
	}
	return 0
}

func (x *Venue) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Venue) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Venue) GetScreenNumber() int32 {
	if x != nil {
		return x.ScreenNumber
	}
	return 0
}

func (x *Venue) GetSeats() []*SeatMatrix {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *Venue) GetMovieTimeSlots() []*MovieTimeSlot {
	if x != nil {
		return x.MovieTimeSlots
	}
	return nil
}

func (x *Venue) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

type MovieList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Movies        []*Movie               `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieList) Reset() {
	*x = MovieList{}
	mi := &file_moviedb_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieList) ProtoMessage() {}

func (x *MovieList) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieList.ProtoReflect.Descriptor instead.
func (*MovieList) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{5}
}

func (x *MovieList) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

type MovieRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Movieid       string                 `protobuf:"bytes,2,opt,name=movieid,proto3" json:"movieid,omitempty"`
	Venueid       string                 `protobuf:"bytes,3,opt,name=venueid,proto3" json:"venueid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieRequest) Reset() {
	*x = MovieRequest{}
	mi := &file_moviedb_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieRequest) ProtoMessage() {}

func (x *MovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieRequest.ProtoReflect.Descriptor instead.
func (*MovieRequest) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{6}
}

func (x *MovieRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieRequest) GetMovieid() string {
	if x != nil {
		return x.Movieid
	}
	return ""
}

func (x *MovieRequest) GetVenueid() string {
	if x != nil {
		return x.Venueid
	}
	return ""
}

type MovieResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Movie         *Movie                 `protobuf:"bytes,3,opt,name=movie,proto3" json:"movie,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieResponse) Reset() {
	*x = MovieResponse{}
	mi := &file_moviedb_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieResponse) ProtoMessage() {}

func (x *MovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieResponse.ProtoReflect.Descriptor instead.
func (*MovieResponse) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{7}
}

func (x *MovieResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MovieResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MovieResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

func (x *MovieResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type MovieListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MovieList     *MovieList             `protobuf:"bytes,3,opt,name=movie_list,json=movieList,proto3" json:"movie_list,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieListResponse) Reset() {
	*x = MovieListResponse{}
	mi := &file_moviedb_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieListResponse) ProtoMessage() {}

func (x *MovieListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moviedb_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieListResponse.ProtoReflect.Descriptor instead.
func (*MovieListResponse) Descriptor() ([]byte, []int) {
	return file_moviedb_service_proto_rawDescGZIP(), []int{8}
}

func (x *MovieListResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MovieListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MovieListResponse) GetMovieList() *MovieList {
	if x != nil {
		return x.MovieList
	}
	return nil
}

func (x *MovieListResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_moviedb_service_proto protoreflect.FileDescriptor

var file_moviedb_service_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x43, 0x72, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64,
	0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x43, 0x72, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75,
	0x72, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x9e, 0x03, 0x0a,
	0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x77, 0x52, 0x08, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x69, 0x64, 0x22, 0xb9, 0x01,
	0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x05, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2a, 0xb8, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x43,
	0x72, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55,
	0x53, 0x49, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x53, 0x54, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4b, 0x45, 0x55,
	0x50, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x46, 0x58, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x52, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x4f, 0x52, 0x45, 0x4f, 0x47, 0x52, 0x41,
	0x50, 0x48, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x59, 0x52, 0x49, 0x43, 0x49,
	0x53, 0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x55, 0x42,
	0x42, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x10, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x52, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x45, 0x47, 0x41, 0x4c, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x18, 0x2a, 0x3a,
	0x0a, 0x09, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x4f, 0x56, 0x49, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x55, 0x50, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x08, 0x53, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x57, 0x4f, 0x5f, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x10, 0x04, 0x32,
	0xf0, 0x05, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x16,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x16, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x16,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x61, 0x72, 0x74, 0x69, 0x6b, 0x37, 0x31, 0x32, 0x30, 0x2f, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x3b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_moviedb_service_proto_rawDescOnce sync.Once
	file_moviedb_service_proto_rawDescData []byte
)

func file_moviedb_service_proto_rawDescGZIP() []byte {
	file_moviedb_service_proto_rawDescOnce.Do(func() {
		file_moviedb_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_moviedb_service_proto_rawDesc), len(file_moviedb_service_proto_rawDesc)))
	})
	return file_moviedb_service_proto_rawDescData
}

var file_moviedb_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_moviedb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_moviedb_service_proto_goTypes = []any{
	(CastAndCrewType)(0),      // 0: moviedb_service.CastAndCrewType
	(VenueType)(0),            // 1: moviedb_service.VenueType
	(SeatType)(0),             // 2: moviedb_service.SeatType
	(*CastAndCrew)(nil),       // 3: moviedb_service.CastAndCrew
	(*MovieTimeSlot)(nil),     // 4: moviedb_service.MovieTimeSlot
	(*Movie)(nil),             // 5: moviedb_service.Movie
	(*SeatMatrix)(nil),        // 6: moviedb_service.SeatMatrix
	(*Venue)(nil),             // 7: moviedb_service.Venue
	(*MovieList)(nil),         // 8: moviedb_service.MovieList
	(*MovieRequest)(nil),      // 9: moviedb_service.MovieRequest
	(*MovieResponse)(nil),     // 10: moviedb_service.MovieResponse
	(*MovieListResponse)(nil), // 11: moviedb_service.MovieListResponse
	(*emptypb.Empty)(nil),     // 12: google.protobuf.Empty
}
var file_moviedb_service_proto_depIdxs = []int32{
	0,  // 0: moviedb_service.CastAndCrew.type:type_name -> moviedb_service.CastAndCrewType
	2,  // 1: moviedb_service.MovieTimeSlot.movie_format:type_name -> moviedb_service.SeatType
	3,  // 2: moviedb_service.Movie.cast_crew:type_name -> moviedb_service.CastAndCrew
	7,  // 3: moviedb_service.Movie.venues:type_name -> moviedb_service.Venue
	2,  // 4: moviedb_service.SeatMatrix.type:type_name -> moviedb_service.SeatType
	1,  // 5: moviedb_service.Venue.type:type_name -> moviedb_service.VenueType
	6,  // 6: moviedb_service.Venue.seats:type_name -> moviedb_service.SeatMatrix
	4,  // 7: moviedb_service.Venue.movie_time_slots:type_name -> moviedb_service.MovieTimeSlot
	5,  // 8: moviedb_service.Venue.movies:type_name -> moviedb_service.Movie
	5,  // 9: moviedb_service.MovieList.movies:type_name -> moviedb_service.Movie
	5,  // 10: moviedb_service.MovieResponse.movie:type_name -> moviedb_service.Movie
	8,  // 11: moviedb_service.MovieListResponse.movie_list:type_name -> moviedb_service.MovieList
	5,  // 12: moviedb_service.MovieDBService.AddMovie:input_type -> moviedb_service.Movie
	9,  // 13: moviedb_service.MovieDBService.GetMovie:input_type -> moviedb_service.MovieRequest
	12, // 14: moviedb_service.MovieDBService.GetAllMovies:input_type -> google.protobuf.Empty
	5,  // 15: moviedb_service.MovieDBService.UpdateMovie:input_type -> moviedb_service.Movie
	9,  // 16: moviedb_service.MovieDBService.DeleteMovie:input_type -> moviedb_service.MovieRequest
	7,  // 17: moviedb_service.MovieDBService.AddVenue:input_type -> moviedb_service.Venue
	9,  // 18: moviedb_service.MovieDBService.GetVenue:input_type -> moviedb_service.MovieRequest
	12, // 19: moviedb_service.MovieDBService.GetAllVenues:input_type -> google.protobuf.Empty
	7,  // 20: moviedb_service.MovieDBService.UpdateVenue:input_type -> moviedb_service.Venue
	9,  // 21: moviedb_service.MovieDBService.DeleteVenue:input_type -> moviedb_service.MovieRequest
	10, // 22: moviedb_service.MovieDBService.AddMovie:output_type -> moviedb_service.MovieResponse
	10, // 23: moviedb_service.MovieDBService.GetMovie:output_type -> moviedb_service.MovieResponse
	11, // 24: moviedb_service.MovieDBService.GetAllMovies:output_type -> moviedb_service.MovieListResponse
	10, // 25: moviedb_service.MovieDBService.UpdateMovie:output_type -> moviedb_service.MovieResponse
	10, // 26: moviedb_service.MovieDBService.DeleteMovie:output_type -> moviedb_service.MovieResponse
	10, // 27: moviedb_service.MovieDBService.AddVenue:output_type -> moviedb_service.MovieResponse
	10, // 28: moviedb_service.MovieDBService.GetVenue:output_type -> moviedb_service.MovieResponse
	11, // 29: moviedb_service.MovieDBService.GetAllVenues:output_type -> moviedb_service.MovieListResponse
	10, // 30: moviedb_service.MovieDBService.UpdateVenue:output_type -> moviedb_service.MovieResponse
	10, // 31: moviedb_service.MovieDBService.DeleteVenue:output_type -> moviedb_service.MovieResponse
	22, // [22:32] is the sub-list for method output_type
	12, // [12:22] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_moviedb_service_proto_init() }
func file_moviedb_service_proto_init() {
	if File_moviedb_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_moviedb_service_proto_rawDesc), len(file_moviedb_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_moviedb_service_proto_goTypes,
		DependencyIndexes: file_moviedb_service_proto_depIdxs,
		EnumInfos:         file_moviedb_service_proto_enumTypes,
		MessageInfos:      file_moviedb_service_proto_msgTypes,
	}.Build()
	File_moviedb_service_proto = out.File
	file_moviedb_service_proto_goTypes = nil
	file_moviedb_service_proto_depIdxs = nil
}
